# This workflow runs automated tests whenever code is pushed to any branch
name: CI Pipeline AWS

# Define when the workflow should run
on:
  push:
    branches:
      - 'main'
      - 'develop'
    paths:
      - 'rag-app-aws/**'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'rag-app-aws/**'
  workflow_dispatch:

# Define environment variables needed for the application
env:
  # Basic application settings
  ENVIRONMENT: test
  APP_NAME: rag-app-aws
  DEBUG: "true"

  # Database connection settings (for testing only)
  POSTGRES_HOST: localhost
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_PORT: 5432

  # API endpoints and paths
  ARXIV_API_URL: https://export.arxiv.org/api/query
  DATA_PATH: ./data

  # Model generation parameters
  TEMPERATURE: "0.7"
  TOP_P: "0.9"
  MAX_TOKENS: "1000"

  # Opik API settings (for AI model evaluation)
  OPIK_API_KEY: ${{ secrets.OPIK_API_KEY }}
  OPIK_WORKSPACE: ${{ secrets.OPIK_WORKSPACE }}
  OPIK_ENVIRONMENT: test
  OPIK_PROJECT_NAME: rag-app-aws-test

  # OpenAI settings
  OPENAI_MODEL: gpt-3.5-turbo
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Poetry version to use
  POETRY_VERSION: "1.8.2"

jobs:
  ci:
    name: CI Pipeline AWS
    runs-on: ubuntu-latest

    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Step 2.5: Cache pip downloads
      - name: Cache pip downloads
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-cache-${{ runner.os }}-

      # Step 3: Cache Poetry installation
      - name: Cache Poetry installation
        uses: actions/cache@v3
        with:
          path: |
            ~/.local
            ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.POETRY_VERSION }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-

      # Step 4: Cache project virtual environment
      - name: Cache project virtual environment
        uses: actions/cache@v3
        with:
          path: ./rag-app-aws/.venv
          key: venv-cache-${{ runner.os }}-${{ hashFiles('rag-app-aws/poetry.lock') }}
          restore-keys: |
            venv-cache-${{ runner.os }}-

      # Step 5: Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      # Step 5.4: Clean up previous virtual environment
      - name: Clean up existing virtual environment
        working-directory: ./rag-app-aws
        run: |
          echo "Removing old .venv folder if exists..."
          rm -rf .venv
          echo "Cleaning .pytest_cache if exists..."
          rm -rf .pytest_cache

      # Step 5.5: Install setuptools
      - name: Install setuptools
        working-directory: ./rag-app-aws
        run: |
          python -m pip install --upgrade setuptools==68.2.2

      # Step 5.6: Clean up problematic packages
      - name: Clean up problematic packages
        working-directory: ./rag-app-aws
        run: |
          pip uninstall -y nvidia-cuda-runtime-cu12 nvidia-cuda-cupti-cu12 nvidia-cuda-nvrtc-cu12 nvidia-cudnn-cu12 nvidia-cufft-cu12 nvidia-curand-cu12 nvidia-cusolver-cu12 nvidia-nccl-cu12 nvidia-nvtx-cu12 || true

      # Step 6: Install project dependencies
      - name: Install dependencies
        working-directory: ./rag-app-aws
        run: |
          echo "Installing dependencies..."
          poetry install --no-interaction --no-root
          echo "Installation complete!"

      # Step 6.5: Debug - List project files
      - name: Debug - List project files
        working-directory: ./rag-app-aws
        run: |
          echo "Listing all files in rag-app-aws project:"
          find .

      # Step 7: Initialize database and run tests
      - name: Initialize database and run tests
        working-directory: ./rag-app-aws
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until poetry run python -c "import psycopg2; conn = psycopg2.connect(dbname='test_db', user='test_user', password='test_password', host='localhost'); conn.close()" 2>/dev/null; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up - executing tests"
          poetry run pytest tests/ -v --junitxml=test-results.xml --cov=server --cov-report=xml

      # Step 8: Upload test results and coverage
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            rag-app-aws/test-results.xml
            rag-app-aws/coverage.xml